The Bridge Pattern 
It is a structural design pattern that decouples an abstraction from its implementation so that the two can vary independently. It is useful when you want to avoid a permanent binding between an abstraction and its implementation and when both can have their own hierarchies.

My example:
The abstraction is represented by the Shape class, which defines a general drawing interface. Specific shapes such as Circle and Rectangle extend this abstraction. On the other side, the Renderer interface defines the implementation layer for how shapes are rendered, with concrete implementations like RasterRenderer and VectorRenderer.